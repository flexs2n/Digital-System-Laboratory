// Frame Buffer Writing Routine
@0x00   0x00 // Load memory value into register A
@0x01   0x00 // Set regA to current HCounter value
@0x02   0x01 // Load memory value into register B
@0x03   0x01 // Set regB to 159 (max horizontal count)
@0x04   0x96 // Compare HCounter with 159
@0x05   0x0B // If equal, jump to vertical check (@0x0B)
@0x06   0x54 // If not, increment HCounter in regA
@0x07   0x02 // Store updated regA value
@0x08   0x00 // Update HCounter in memory
@0x09   0x07 // Jump to pixel writing section
@0x0A   0x20 // Target address @0x20
@0x0B   0x01 // Load memory value into regB
@0x0C   0x04 // Set regB to 119 (max vertical count)
@0x0D   0x00 // Load memory value into regA
@0x0E   0x03 // Set regA to current VCounter value
@0x0F   0x96 // Compare VCounter with 119
@0x10   0x1A // If equal, jump to reset (@0x1A)
@0x11   0x54 // If not, increment VCounter in regA
@0x12   0x02 // Store updated regA value
@0x13   0x03 // Update VCounter in memory
@0x14   0x00 // Load memory value into regA
@0x15   0x02 // Set regA to 0 (reset value)
@0x16   0x02 // Store regA value
@0x17   0x00 // Reset HCounter to 0
@0x18   0x07 // Jump to pixel writing section
@0x19   0x20 // Target address @0x20
@0x1A   0x00 // Load memory value into regA
@0x1B   0x02 // Set regA to 0 (reset value)
@0x1C   0x02 // Store regA value
@0x1D   0x03 // Reset VCounter to 0 (end of frame)
@0x1E   0x02 // Store regA value
@0x1F   0x00 // Reset HCounter to 0
@0x20   0x00 // Load memory value into regA
@0x21   0x03 // Set regA to current VCounter
@0x22   0x01 // Load memory value into regB
@0x23   0x12 // Set regB to 40 (first vertical grid line)
@0x24   0x96 // Compare VCounter with 40
@0x25   0x30 // If equal, jump to set black pixel (@0x30)
@0x26   0x01 // Load memory value into regB
@0x27   0x13 // Set regB to 80 (second vertical grid line)
@0x28   0x96 // Compare VCounter with 80
@0x29   0x30 // If equal, jump to set black pixel (@0x30)
@0x2A   0x01 // Load memory value into regB
@0x2B   0x02 // Set regB to 1 (white pixel)
@0x2C   0x03 // Store regB value
@0x2D   0xB2 // Write 1 to frame buffer at @0xB2
@0x2E   0x07 // Jump to horizontal grid check
@0x2F   0x36 // Target address @0x36
@0x30   0x01 // Load memory value into regB
@0x31   0x05 // Set regB to 0 (black pixel)
@0x32   0x03 // Store regB value
@0x33   0xB2 // Write 0 to frame buffer at @0xB2
@0x34   0x07 // Jump to coordinate update
@0x35   0x4A // Target address @0x4A
@0x36   0x00 // Load memory value into regA
@0x37   0x00 // Set regA to current HCounter
@0x38   0x01 // Load memory value into regB
@0x39   0x10 // Set regB to 53 (first horizontal grid line)
@0x3A   0x96 // Compare HCounter with 53
@0x3B   0x46 // If equal, jump to set black pixel (@0x46)
@0x3C   0x01 // Load memory value into regB
@0x3D   0x11 // Set regB to 107 (second horizontal grid line)
@0x3E   0x96 // Compare HCounter with 107
@0x3F   0x46 // If equal, jump to set black pixel (@0x46)
@0x40   0x01 // Load memory value into regB
@0x41   0x02 // Set regB to 1 (white pixel)
@0x42   0x03 // Store regB value
@0x43   0xB2 // Write 1 to frame buffer at @0xB2
@0x44   0x07 // Jump to coordinate update
@0x45   0x4A // Target address @0x4A
@0x46   0x01 // Load memory value into regB
@0x47   0x05 // Set regB to 0 (black pixel)
@0x48   0x03 // Store regB value
@0x49   0xB2 // Write 0 to frame buffer at @0xB2
@0x4A   0x00 // Load memory value into regA
@0x4B   0x00 // Set regA to current HCounter
@0x4C   0x02 // Store regA value
@0x4D   0xB0 // Write HCounter to VGA X coordinate (@0xB0)
@0x4E   0x01 // Load memory value into regB
@0x4F   0x03 // Set regB to current VCounter
@0x50   0x03 // Store regB value
@0x51   0xB1 // Write VCounter to VGA Y coordinate (@0xB1)
@0x52   0x01 // Load memory value into regB
@0x53   0x01 // Set regB to 159 (max HCounter)
@0x54   0xB6 // Check if HCounter < 159
@0x55   0x00 // If true, loop back to @0x00
@0x56   0x00 // Load memory value into regA
@0x57   0x03 // Set regA to current VCounter
@0x58   0x01 // Load memory value into regB
@0x59   0x04 // Set regB to 119 (max VCounter)
@0x5A   0xB6 // Check if VCounter < 119
@0x5B   0x00 // If true, loop back to @0x00

// Mouse Initialization Routine
@0x5C   0x00 // Load mouse status into regA
@0x5D   0xA0 // From memory address @0xA0
@0x5E   0x02 // Store regA value
@0x5F   0xC0 // Write mouse status to LED memory (@0xC0)
@0x60   0x00 // Load previous mouse X position into regA
@0x61   0x14 // From memory address @0x14
@0x62   0x01 // Load previous mouse Y position into regB
@0x63   0x15 // From memory address @0x15
@0x64   0x02 // Store regA value
@0x65   0xB0 // Write previous X to VGA X coordinate (@0xB0)
@0x66   0x03 // Store regB value
@0x67   0xB1 // Write previous Y to VGA Y coordinate (@0xB1)
@0x68   0x00 // Load previous pixel value into regA
@0x69   0x16 // From memory address @0x16
@0x6A   0x02 // Store regA value
@0x6B   0xB2 // Restore previous pixel to frame buffer (@0xB2)
@0x6C   0x00 // Load current mouse X into regA
@0x6D   0xA1 // From memory address @0xA1
@0x6E   0x01 // Load current mouse Y into regB
@0x6F   0xA2 // From memory address @0xA2
@0x70   0x02 // Store regA value
@0x71   0x14 // Update mouse X in RAM (@0x14)
@0x72   0x03 // Store regB value
@0x73   0x15 // Update mouse Y in RAM (@0x15)
@0x74   0x02 // Store regA value
@0x75   0xD0 // Write mouse X to 7-segment display base (@0xD0)
@0x76   0x03 // Store regB value
@0x77   0xD1 // Write mouse Y to 7-segment display high (@0xD1)
@0x78   0x02 // Store regA value
@0x79   0xB0 // Write mouse X to VGA X coordinate (@0xB0)
@0x7A   0x03 // Store regB value
@0x7B   0xB1 // Write mouse Y to VGA Y coordinate (@0xB1)
@0x7C   0x00 // Load current pixel value into regA
@0x7D   0xB2 // From frame buffer at @0xB2
@0x7E   0x02 // Store regA value
@0x7F   0x16 // Save current pixel to RAM (@0x16)
@0x80   0x00 // Load constant into regA
@0x81   0x05 // Set regA to 1 (cursor pixel)
@0x82   0x02 // Store regA value
@0x83   0xB2 // Write 1 to frame buffer at @0xB2 (draw cursor)
@0x84   0x08 // Enter idle state, wait for interrupts

// Mouse Grid Position Detection
@0x85   0x00 // Load mouse X position into regA
@0x86   0xA1 // From memory address @0xA1
@0x87   0x01 // Load constant into regB
@0x88   0x10 // Set regB to 53 (first X boundary)
@0x89   0xB6 // Check if mouse X < 53
@0x8A   0x91 // If true, jump to left section (@0x91)
@0x8B   0x01 // Load constant into regB
@0x8C   0x11 // Set regB to 107 (second X boundary)
@0x8D   0xB6 // Check if mouse X < 107
@0x8E   0x9D // If true, jump to middle section (@0x9D)
@0x8F   0x07 // If false, jump to right section
@0x90   0xA9 // Target address @0xA9

// Left Section (X < 53)
@0x91   0x00 // Load mouse Y position into regA
@0x92   0xA2 // From memory address @0xA2
@0x93   0x01 // Load constant into regB
@0x94   0x12 // Set regB to 40 (first Y boundary)
@0x95   0xB6 // Check if mouse Y < 40
@0x96   0xB5 // If true, jump to bottom left (@0xB5)
@0x97   0x01 // Load constant into regB
@0x98   0x13 // Set regB to 80 (second Y boundary)
@0x99   0xB6 // Check if mouse Y < 80
@0x9A   0xCD // If true, jump to middle left (@0xCD)
@0x9B   0x07 // If false, jump to top left
@0x9C   0xC1 // Target address @0xC1

// Middle Section (53 <= X < 107)
@0x9D   0x00 // Load mouse Y position into regA
@0x9E   0xA2 // From memory address @0xA2
@0x9F   0x01 // Load constant into regB
@0xA0   0x12 // Set regB to 40 (first Y boundary)
@0xA1   0xB6 // Check if mouse Y < 40
@0xA2   0xBD // If true, jump to bottom middle (@0xBD)
@0xA3   0x01 // Load constant into regB
@0xA4   0x13 // Set regB to 80 (second Y boundary)
@0xA5   0xB6 // Check if mouse Y < 80
@0xA6   0xD5 // If true, jump to middle middle (@0xD5)
@0xA7   0x07 // If false, jump to top middle
@0xA8   0xC9 // Target address @0xC9

// Right Section (X >= 107)
@0xA9   0x00 // Load mouse Y position into regA
@0xAA   0xA2 // From memory address @0xA2
@0xAB   0x01 // Load constant into regB
@0xAC   0x12 // Set regB to 40 (first Y boundary)
@0xAD   0xB6 // Check if mouse Y < 40
@0xAE   0xB9 // If true, jump to bottom right (@0xB9)
@0xAF   0x01 // Load constant into regB
@0xB0   0x13 // Set regB to 80 (second Y boundary)
@0xB1   0xB6 // Check if mouse Y < 80
@0xB2   0xD1 // If true, jump to middle right (@0xD1)
@0xB3   0x07 // If false, jump to top right
@0xB4   0xC5 // Target address @0xC5

// Command Selection Based on Grid Position
// Bottom Left
@0xB5   0x00 // Load command value into regA
@0xB6   0x17 // From memory address @0x17 (command for bottom left)
@0xB7   0x07 // Jump to output routine
@0xB8   0xD9 // Target address @0xD9

// Bottom Right
@0xB9   0x00 // Load command value into regA
@0xBA   0x18 // From memory address @0x18 (command for bottom right)
@0xBB   0x07 // Jump to output routine
@0xBC   0xD9 // Target address @0xD9

// Bottom Middle
@0xBD   0x00 // Load command value into regA
@0xBE   0x19 // From memory address @0x19 (command for bottom middle)
@0xBF   0x07 // Jump to output routine
@0xC0   0xD9 // Target address @0xD9

// Top Left
@0xC1   0x00 // Load command value into regA
@0xC2   0x20 // From memory address @0x20 (command for top left)
@0xC3   0x07 // Jump to output routine
@0xC4   0xD9 // Target address @0xD9

// Top Right
@0xC5   0x00 // Load command value into regA
@0xC6   0x21 // From memory address @0x21 (command for top right)
@0xC7   0x07 // Jump to output routine
@0xC8   0xD9 // Target address @0xD9

// Top Middle
@0xC9   0x00 // Load command value into regA
@0xCA   0x22 // From memory address @0x22 (command for top middle)
@0xCB   0x07 // Jump to output routine
@0xCC   0xD9 // Target address @0xD9

// Middle Left
@0xCD   0x00 // Load command value into regA
@0xCE   0x23 // From memory address @0x23 (command for middle left)
@0xCF   0x07 // Jump to output routine
@0xD0   0xD9 // Target address @0xD9

// Middle Right
@0xD1   0x00 // Load command value into regA
@0xD2   0x24 // From memory address @0x24 (command for middle right)
@0xD3   0x07 // Jump to output routine
@0xD4   0xD9 // Target address @0xD9

// Middle Middle
@0xD5   0x00 // Load command value into regA
@0xD6   0x25 // From memory address @0x25 (command for middle middle)
@0xD7   0x07 // Jump to output routine
@0xD8   0xD9 // Target address @0xD9

// Command Output to IR and LEDs
@0xD9   0x02 // Store regA value
@0xDA   0x90 // Write command to IR memory (@0x90)
@0xDB   0x02 // Store regA value
@0xDC   0xC1 // Write command to LED memory (@0xC1)
@0xDD   0x08 // Enter idle state

// Interrupt Vector Table
@0xFE   0x85 // Timer interrupt jumps to @0x85
@0xFF   0x5C // Mouse interrupt jumps to @0x5C